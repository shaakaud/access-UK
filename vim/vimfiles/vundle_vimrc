set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

Plugin 'vim-scripts/ctags.vim--Johnson'
Plugin 'vim-scripts/MultipleSearch'
Plugin 'vim-scripts/DirDiff.vim'
Plugin 'antiAgainst/cscope-macros.vim'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'justinmk/vim-sneak'
Plugin 'edsono/vim-matchit'
Plugin 'sjl/gundo.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'vim-scripts/python_match.vim'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'jeetsukumaran/vim-buffersaurus'
Plugin 'shaakaud/vimfiles' "My own plugins - took from LK
Plugin 'vim-scripts/vimtabs.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'flazz/vim-colorschemes'
Plugin 'Shougo/vimproc.vim'
Plugin 'unite.vim'
"For dong fzf stuff in vim
Plugin 'junegunn/fzf.vim'
"#for easy buffer switching
"Plugin 'ctrlpvim/ctrlp.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"

"============================================================================================

"UDAY My preferences
set hlsearch
set number
set autoindent
set smartindent
set cindent
set nocompatible
set tabstop=4
set shiftwidth=4
set backspace=2
set ruler
set incsearch
set ttyfast
set expandtab
set laststatus=2
"set columns=80
colorscheme night
set nowrap
set tw=0
if has('gui_running')
    set background=light
else
    set background=dark
endif
"colorscheme solarized
filetype plugin on

set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
set complete-=k complete+=k
syntax on

"Key Mappings for cscope
"source  ~/.vim/plugin/cscope_maps.vim

"Key Mappings for quickfix
set cscopequickfix=s-,c-,d-,i-,t-,f-,e-
:map <C-Up> :cope 15<CR>
:map <C-Down> :ccl<CR>
:map <C-Right> :cn<CR>
:map <C-Left> :cp<CR>

"my cscope.out is at a dir one level up!..so
if has("cscope") && filereadable("../cscope.out")
  cs add .. ..
endif
if filereadable("../tags")
  set tags+=../tags
endif

"Key Mappings for BufExplorer - To work on multiple buffers in the same VIM window
let bufExplorerOpenMode=1
let bufExplorerSplitBelow=1
let bufExplorerSplitHorzSize=10
:map <S-Right> :bnext<CR>
:map <S-Left>  :bprev<CR>
:map <S-Up>  \bs


"SHIFT-Insert are Paste
nmap <S-Insert>        "+gP
imap <S-Insert>        <ESC><S-Insert>i

"vim-fugitive plugin command - To see git diff of a file type :<F9> in vim
:cmap <F9> :tabnew %\|Gdiff<CR>

"for fzf
set rtp+=~/.fzf

"Search for a file using fzf in vim
"nmap gG     <Esc>:call PanosTags("../tags_f")<CR>
"nmap gA     <Esc>:call PanosTags("../tags_s")<CR>

"Added by Lakshman Kumar
if has("win32unix")
    let g:showfuncctagsbin="/usr/local/timostools/ctags"
else
    let g:showfuncctagsbin="/home/udayakut/software/ctags/ctags-5.8/installed_binaries/bin/ctags"
endif
let g:ctags_statusline=1
let g:ctags_title=0
let generate_tags=1

"To copy vbox centos vm to windows clipboard
function! DumpToClipBoard()
    "call writefile(split(@","\n"), '/dev/clipboard')
    call system("xsel -i -b", getreg("\""))
endfunction

map <Leader>clip :call DumpToClipBoard()<CR>
vmap <C-c> y:call DumpToClipBoard()<CR>

if has("win32unix")
    set guifont=Bitstream\ Vera\ Sans\ Mono\ 13
endif

"To do fzf and open that file using cscope
function! LoadCscopeToQuickFix(currword, oper)
  execute "normal mZ"
  execute "set csqf=" . a:oper . "-"
  execute "cs find " a:oper . " " . a:currword
  execute "copen"
  execute "wincmd k"
  execute "normal `Z"
  execute "set csqf="
endfunction

function! PanosTagsSink(line)
  call LoadCscopeToQuickFix(a:line,"s")
  execute "cc"
endfunction

function! PanosTags(file)
  call fzf#run({
  \   'source': "sed '/^\\!/d;s/\t.*//' " . a:file . " | uniq",
  \   'options' : '--exact',
  \   'right' : '30%',
  \   'sink':   function('PanosTagsSink')})
endfunction

function! PanosTagsSinkJustGo(line)
  let g:last_name = a:line
endfunction

"To browse through the errors after compilation :LoadErrors
function! LoadErrorsFunction()
  execute ":cf log.txt"
  execute ":copen"
  execute "wincmd j"
  execute "normal G"
  execute "normal /\\<error\\>/s\<CR>"
endfunction

command! LoadErrors call LoadErrorsFunction()

"Unite UNITE unite - added by UDAY
nmap <space> [unite]
nnoremap [unite] <nop>

nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed -start-insert file_rec/async:! buffer file_mru bookmark<cr><c-u>
nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>

nnoremap <silent> [unite]e :<C-u>Unite -buffer-name=recent file_mru<cr>
nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line -start-insert line<cr>
nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers -start-insert buffer file_mru<cr>
nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction
