set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'vim-scripts/ctags.vim--Johnson'
Plugin 'vim-scripts/DirDiff.vim'
Plugin 'antiAgainst/cscope-macros.vim'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'tpope/vim-fugitive'
Plugin 'preservim/nerdtree'
Plugin 'justinmk/vim-sneak'
Plugin 'tmhedberg/matchit'                    " % given a new life
Plugin 'sjl/gundo.vim'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'vim-scripts/python_match.vim'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'jeetsukumaran/vim-buffersaurus'
Plugin 'shaakaud/vimfiles'                 "My own plugins - took from LK
Plugin 'vim-scripts/vimtabs.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'flazz/vim-colorschemes'
Plugin 'Shougo/vimproc.vim'
"Plugin 'unite.vim'   " Commented out - vim8 throws errors when this plugin is enabled
Plugin 'junegunn/fzf.vim'                  " :Fzf and other commands in vim
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'majutsushi/tagbar'
"Plugin 'klen/python-mode.git'             "To add python-mode features to vim
Plugin 'python-mode/python-mode.git'      "To add python-mode features to vim
Plugin 'vim-scripts/Mark--Karkat'          " Multiple color search
Plugin 'xolox/vim-misc'                    " vim-session plugin requires this
Plugin 'xolox/vim-session'                 " vim session management - mksession
"Plugin 'ctrlpvim/ctrlp.vim'               "for easy buffer switching
"tmux - to restore tmux sessions after reboot/restart - tmux-resurrect and tmux-continuum is there in .tmux.conf. To restore tmux after reboot/restart - just type tmux on the shell after reboot/restart, it will automatically restore the tmux sessions
"below c9s plugin is Vikube - Operating Kubernetes Cluster from Vim, in Vim - https://github.com/c9s/vikube.vim
Plugin 'c9s/helper.vim'
Plugin 'c9s/treemenu.vim'
Plugin 'c9s/vikube.vim'
"Plugin 'fatih/vim-go' "https://github.com/fatih/vim-go

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"

"============================================================================================

"UDAY My preferences
set hlsearch
set number
set autoindent
set smartindent
set cindent
set nocompatible
set tabstop=4
set shiftwidth=4
set backspace=2
set ruler
set incsearch
set ttyfast
set expandtab
set laststatus=2
"set columns=80

"to remember the cursor position/location in the files of the vim buffers
"autocmd BufEnter * silent! normal! g`"

"to draw a vertical line at column 80 and highlight all red after that
set colorcolumn=80
"match ErrorMsg '\%>80v.\+'

"colorscheme night
"colorscheme White
set nowrap
set tw=0
if has('gui_running')
    "set background=light
    set background=dark
else
    set background=dark
endif

"To set solaraized color scheme
let g:solarized_termcolors=16
let g:solarized_termtrans=1
colorscheme solarized

filetype plugin on

set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
set complete-=k complete+=k
syntax on

"vim-session plugin configuration
let g:session_autosave='yes'
let g:session_autosave_periodic=60
let g:session_autoload = 'no' "to not load default session when vim is opened

"Key Mappings for cscope
"source  ~/.vim/plugin/cscope_maps.vim

"Key Mappings for quickfix - To display the outputs of ":cscope f .." commands (up/down/right/left arrow)
"at the bottom of the window and navigating through that
set cscopequickfix=s-,c-,d-,i-,t-,f-,e-
:map <C-Up> :cope 15<CR>
:map <C-Down> :ccl<CR>
:map <C-Right> :cn<CR>
:map <C-Left> :cp<CR>

"my cscope.out is at a dir one level up!..so
if has("cscope") && filereadable("../cscope.out")
  cs add .. ..
endif
if filereadable("../tags")
  set tags+=../tags
endif

"Key Mappings for bufexplorer - To work on multiple buffers in the same VIM window - SHIFT-<options>
"let bufExplorerOpenMode=0
let g:bufExplorerUseCurrentWindow=0   " Open using current window(0) or new window(1).
let g:bufExplorerSplitBelow=1
let g:bufExplorerSplitHorzSize=10
let g:bufExplorerSortBy='mru'        " Sort by most recently used.
let g:bufExplorerDefaultHelp=0       " Do not show default help.
let g:bufExplorerShowRelativePath=1  " Show relative paths.
" :bnext and :bprev are vim commands to navigate the vim buffers and \bs is from bufexplorer plugin
:map <S-Right> :bnext<CR>
:map <S-Left>  :bprev<CR>
:map <S-Up>  \bs


"SHIFT-Insert are Paste
nmap <S-Insert>        "+gP
imap <S-Insert>        <ESC><S-Insert>i

"vim-fugitive plugin command - To see git diff of a file type :<F9> in vim
:cmap <F9> :tabnew %\|Gdiff<CR>
set diffopt+=vertical

"for fzf
set rtp+=~/.fzf

if has("win32unix")
    set guifont=Bitstream\ Vera\ Sans\ Mono\ 13
endif

"To do fzf and open that file using cscope
function! LoadCscopeToQuickFix(currword, oper)
  execute "normal mZ"
  execute "set csqf=" . a:oper . "-"
  execute "cs find " a:oper . " " . a:currword
  execute "copen"
  execute "wincmd k"
  execute "normal `Z"
  execute "set csqf="
endfunction

function! PanosTagsSink(line)
  call LoadCscopeToQuickFix(a:line,"s")
  execute "cc"
endfunction

function! PanosTags(file)
  call fzf#run({
  \   'source': "sed '/^\\!/d;s/\t.*//' " . a:file . " | uniq",
  \   'options' : '--exact',
  \   'right' : '30%',
  \   'sink':   function('PanosTagsSink')})
endfunction

function! PanosTagsSinkJustGo(line)
  let g:last_name = a:line
endfunction

"To browse through the errors after compilation :LoadErrors
function! LoadErrorsFunction()
  execute ":cf log.txt"
  execute ":copen"
  execute "wincmd j"
  execute "normal G"
  execute "normal /\\<error\\>/s\<CR>"
endfunction

command! LoadErrors call LoadErrorsFunction()

"Unite UNITE unite - added by UDAY - To search files from buffers/folders, lines within a file
nmap <space> [unite]
nnoremap [unite] <nop>

nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed -start-insert file_rec/async:! buffer file_mru bookmark<cr><c-u>
nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>

nnoremap <silent> [unite]e :<C-u>Unite -buffer-name=recent file_mru<cr>
nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line -start-insert line<cr>
nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers -start-insert buffer file_mru<cr>
nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>

" Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
endfunction

"To disable detection of trailing white space displayed on the airline statusbar
let g:airline#extensions#whitespace#enabled = 0
"To show buffers as tabs in the top
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tagbar#flags = 'f'
let g:airline#extensions#nerdtree_status = 1 "enable/disable nerdtree's statusline integration
let g:airline_powerline_fonts=1
let g:airline#extensions#default#section_truncate_width = {
      \ 'a': 20,
      \ 'b': 100,
      \ 'c': 20,
      \ 'gutter': 100,
      \ 'x': 20,
      \ 'y': 100,
      \ 'z': 20,
      \ 'warning': 100,
      \ 'error': 100,
      \ }
"Set vim-airline theme - You can also change with :AirlineTheme <theme name>
let g:airline_theme='solarized'
"let g:airline_theme='gruvbox'
"let g:airline_theme='light'
function! AirlineThemePatch(palette)
  if g:airline_theme == 'solarized'
    "greenish
    let a:palette.normal.airline_a = [ '#1c1c1c', '#5fff00', 234, 82 ]
    let a:palette.normal.airline_z = [ '#1c1c1c', '#5fff00', 234, 82 ]
    "blue
    let a:palette.visual.airline_a = [ '#ffffff', '#0087ff', 255, 33 ]
    let a:palette.visual.airline_z = [ '#ffffff', '#0087ff', 255, 33 ]
    "violetish
    let a:palette.insert.airline_a = [ '#3a3a3a', '#af00ff', 237, 129 ]
    let a:palette.insert.airline_z = [ '#3a3a3a', '#af00ff', 237, 129 ]
    "reddish
    let a:palette.replace.airline_a = [ '#ffffff', '#ff005f', 255, 197 ]
    let a:palette.replace.airline_z = [ '#ffffff', '#ff005f', 255, 197 ]
  endif
endfunction
let g:airline_theme_patch_func = 'AirlineThemePatch'

"Tagbar - Displays function names. Also displays function names in vim-airline status bar
nmap <F8> :TagbarToggle<CR>

"python-mode configuration
"Check code on every save (if file has been modified)
let g:pymode_lint_on_write = 0
"Auto open cwindow (quickfix) if any errors have been found
let g:pymode_lint_cwindow = 0
